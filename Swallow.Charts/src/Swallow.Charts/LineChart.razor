@typeparam TKey
@typeparam TValue

<svg @attributes="AdditionalAttributes" viewBox="0 0 @(valueCount + 2) @maxValue">
    <g class="chart line-chart" transform="scale(1, -1)" transform-origin="center">
        @foreach (var series in Data)
        {
            <g class="series" id="@series.Name">
                @{
                    var coordinates = series.Values.Select(static (point, index) => new Coordinate(index + 1, int.CreateChecked(point.Value))).ToArray();
                }

                @foreach (var coordinate in coordinates)
                {
                    @RenderDataPoint(coordinate)
                }

                @foreach (var pair in coordinates.Zip(coordinates.Skip(1)))
                {
                    @RenderInterpolation(pair.First, pair.Second)
                }
            </g>
        }
    </g>
</svg>

@code {

    private RenderFragment RenderDataPoint(Coordinate position)
    {
        return @<circle class="dot" r="0.2" cx="@(position.X)" cy="@position.Y"/>;
    }

    private RenderFragment RenderInterpolation(Coordinate from, Coordinate to)
    {
        return Interpolation switch
        {
            Interpolation.Linear => @<path stroke="black" stroke-width="0.1" fill="none" d="M @(from.X) @(from.Y) L @(to.X) @(to.Y)"/>,
            Interpolation.StepStart => @<path stroke="black" stroke-width="0.1" fill="none" d="M @(from.X) @(from.Y) V @(to.Y) H @(to.X)"/>,
            Interpolation.StepEnd => @<path stroke="black" stroke-width="0.1" fill="none" d="M @(from.X) @(from.Y) H @(to.X) V @(to.Y)"/>,
            _ => throw new ArgumentOutOfRangeException()
        };
    }

}
