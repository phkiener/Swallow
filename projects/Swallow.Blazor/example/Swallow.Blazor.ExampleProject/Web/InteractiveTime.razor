@using Swallow.Blazor.Reactive.Abstractions
@using Swallow.Blazor.Reactive.Abstractions.Rendering
@using Swallow.Blazor.Reactive.Abstractions.State

@attribute [ReactiveComponent]
@inject IReactiveStateHandler StateHandler

<div>
    <span>It's currently @DateTime.Now.ToString(format) after @refreshCount refreshes and @clickCount clicks</span>
    <button type="button" rx-id="@Island.Build("increment")" @onclick="@Increment">Refresh</button>
</div>

<select @bind="format" @bind:after="@StateHasChanged" rx-id="@Island.Build("format")">
    <option value="O" selected="@(format is "O")">ISO 8601</option>
    <option value="R" selected="@(format is "R")">RFC 1123</option>
    <option value="u" selected="@(format is "u")">Universal sortable</option>
    <option value="U" selected="@(format is "U")">Universal full</option>
</select>

@if (clickCount > 0)
{
    <button type="button" rx-id="@Island.Build("reset")" @onclick="@Reset">Reset</button>
}

@code
{
    private int refreshCount = 0;
    private int clickCount = 0;

    private string format = "O";

    [CascadingParameter]
    public required IReactiveIsland Island { get; set; }

    protected override void OnInitialized()
    {
        StateHandler.Register(Island, nameof(refreshCount), () => refreshCount);
        StateHandler.Register(Island, nameof(clickCount), () => clickCount);
        StateHandler.Register(Island, nameof(format), () => format);

        refreshCount += 1;
    }

    private void Increment()
    {
        clickCount += 1;
    }

    private void Reset()
    {
        refreshCount = 0;
        clickCount = 0;
    }
}
